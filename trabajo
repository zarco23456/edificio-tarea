<!DOCTYPE html>
<html>
  <head>
    <title>Ej: Cilindro</title>
    <style>
      html, body { margin: 0; padding: 0; overflow: hidden; }
    </style>
  </head>
  <body>
    <script src="js/three.min.js"></script>
    <script>
		var scene, aspect, camera, renderer;
		var startTime = Date.now();
		
		init();
		animate();
	
		function init(){
			scene = new THREE.Scene();
			aspect = window.innerWidth / window.innerHeight;
			camera = new THREE.PerspectiveCamera( 45, aspect, 0.1, 1000);
			renderer = new THREE.WebGLRenderer();
			renderer.setSize( window.innerWidth, window.innerHeight );
			document.body.appendChild( renderer.domElement );
				  
			var size = 10;
			var arrowSize = 1;
			var divisions = size;
			var origin = new THREE.Vector3( 0, 0, 0 );
			var x = new THREE.Vector3( 1, 0, 0 );
			var y = new THREE.Vector3( 0, 1, 0 );
		  	var z = new THREE.Vector3( 0, 0, 1 );
			var color1 = new THREE.Color( 0xFFFFFF );
		  	var color2 = new THREE.Color( 0x333333 );
		  	var colorR = new THREE.Color( 0xAA3333 );
		  	var colorG = new THREE.Color( 0x33AA33 );
		  	var colorB = new THREE.Color( 0x333366 );
		  
		  	//CREAR LAS GRILLAS PARA EL ESCENARIO
		  	var axesHelper = new THREE.AxesHelper( size );
		  	var gridHelperXY = new THREE.GridHelper( size, divisions, color1, color1);
		  	var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2 );
		  	var gridHelperYZ = new THREE.GridHelper( size, divisions, color2, color2 );
            
            //ROTARLAS PARA QUE QUEDEN EN EL ESPACIO ADECUADO
            gridHelperXY.rotateOnWorldAxis ( x, THREE.Math.degToRad(90) );
            gridHelperXZ.rotateOnWorldAxis ( y, THREE.Math.degToRad(90) );
            gridHelperYZ.rotateOnWorldAxis ( z, THREE.Math.degToRad(90) );
            
            //CREAR LAS FLECHAS QUE INDICAN LOS EJES DE COORDENADAS 3D
            var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
            var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
            var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
			
			//CREAR LAS GEOMETRAï¿½AS
            //Punto
            
			 var geoCilindro = new THREE.Geometry();
            var zTemp = 0;
            var res = 25.0;
            for( var i = 0; i < res; i++){
                for( var j = 0; j < res; j++){
                    var punto = new THREE.Vector3();
                    punto.x = (2.0 * (res - i) / res ) * Math.cos( ( j * 2.0 * Math.PI ) / res,) ;
                    punto.y = 5.0 * i / res;
                    punto.z = (2.0 * (res - i) / res ) * Math.sin( ( j * 2.0 * Math.PI ) / res) ;
                    geoCilindro.vertices.push( punto );
                }
            }
			var geoCilindro2 = new THREE.Geometry();
            var zTemp = 0;
            var res = 25.0;
            for( var i = 0; i < res; i++){
                for( var j = 0; j < res; j++){
                    var punto = new THREE.Vector3();
                    punto.x = 2 * Math.cos( ( j * 6 * Math.PI )/res);
                    punto.y = 2 * i/res;
                    punto.z = 2 * Math.sin( ( j * 6 * Math.PI )/res);
                    geoCilindro.vertices.push( punto );
                }
            }
			var geoCilindro3 = new THREE.Geometry();
            var zTemp = 0;
            var res = 25.0;
            for( var i = 0; i < res; i++){
                for( var j = 0; j < res; j++){
                    var punto = new THREE.Vector3();
                    punto.x = 3 * Math.cos( ( j * 6 * Math.PI )/res);
                    punto.y = 3 * i/res;
                    punto.z = 3 * Math.sin( ( j * 6 * Math.PI )/res);
                    geoCilindro.vertices.push( punto );
                }
            }
			var geoCilindro4 = new THREE.Geometry();
            var zTemp = 0;
            var res = 25.0;
            for( var i = 0; i < res; i++){
                for( var j = 0; j < res; j++){
                    var punto = new THREE.Vector3();
                    
                    punto.y = 3 * (res/i)+1;
                    
                    geoCilindro.vertices.push( punto );

                }
            }
			var geoCilindro5 = new THREE.Geometry();
            var zTemp = 0;
            var res = 25.0;
            for( var i = 0; i < res; i++){
                for( var j = 0; j < res; j++){
                    var punto = new THREE.Vector3();
                    
                    punto.y = 3 * (res/i)+1;
                    
                    geoCilindro.vertices.push( punto );
                }
            }
			
			
			
			//CREAR LOS MATERIALES
            var matLinea1 = new THREE.MeshBasicMaterial( { color: 0xFFFFFF } );
			var matLinea2 = new THREE.LineBasicMaterial( { color: 0x333333 } );
			
			//CREAR LOS OBJETOS
			var cilindro = new THREE.Line( geoCilindro);
			var cilindro2 = new THREE.Line( geoCilindro2,matLinea2  );
			
		  
		  	//AGREGAR A LA ESCENA
		  	//scene.add( gridHelperXY );
            scene.add( gridHelperXZ );
		  	scene.add( arrowX );	
		  	scene.add( arrowY );	
		  	scene.add( arrowZ );	
			scene.add( cilindro );
			
			camera.position.x = 10;
			camera.position.y = 10;	 
		  	camera.position.z =  10;
			
		  	camera.lookAt( origin );
			}
    
    function animate() {
        render();
        requestAnimationFrame( animate );
    }
    
    function render(){
        var dtime = Date.now()-startTime;
        camera.position.x = 10*Math.cos(dtime/10000);
        camera.position.z = 10*Math.sin(dtime/10000);
        camera.lookAt( 0, 0, 0 );
        renderer.render( scene, camera );
    }
    </script>
  </body>
</html>
